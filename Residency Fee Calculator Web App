import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { PlusCircle, Trash2 } from 'lucide-react';

const SpecialtyInput = ({ specialty, count, onChange, onRemove }) => (
  <div className="mb-4 flex items-center space-x-2">
    <Input
      type="text"
      value={specialty}
      onChange={(e) => onChange('specialty', e.target.value)}
      placeholder="Specialty name"
      className="flex-grow"
    />
    <Input
      type="number"
      value={count}
      onChange={(e) => onChange('count', e.target.value)}
      min="0"
      placeholder="# of programs"
      className="w-32"
    />
    <Button variant="ghost" size="icon" onClick={onRemove} className="text-red-600 hover:text-red-800">
      <Trash2 className="h-4 w-4" />
    </Button>
  </div>
);

const ResidencyFeeCalculator = () => {
  const [specialties, setSpecialties] = useState([
    { id: 1, specialty: '', count: 0 },
  ]);

  const calculateFee = (count) => {
    if (count <= 30) return count * 11;
    return 30 * 11 + (count - 30) * 30;
  };

  const totalFee = specialties.reduce(
    (sum, { count }) => sum + calculateFee(parseInt(count) || 0),
    0
  );

  const handleInputChange = (id, field, value) => {
    setSpecialties((prev) =>
      prev.map((s) => (s.id === id ? { ...s, [field]: value } : s))
    );
  };

  const addSpecialty = () => {
    setSpecialties((prev) => [
      ...prev,
      { id: Date.now(), specialty: '', count: 0 },
    ]);
  };

  const removeSpecialty = (id) => {
    setSpecialties((prev) => prev.filter((s) => s.id !== id));
  };

  return (
    <div className="min-h-screen bg-[#f8f8f8] flex items-center justify-center p-4">
      <Card className="w-full max-w-2xl bg-white rounded-lg shadow-lg overflow-hidden">
        <CardHeader className="bg-[#34495E] text-white px-6 py-4">
          <CardTitle className="text-2xl font-bold">
            2025 ERAS® Residency Fee Calculator
          </CardTitle>
        </CardHeader>
        <CardContent className="p-6">
          <p className="text-sm text-gray-600 mb-4">
            ERAS® application fees are based on the number of programs applied to per specialty. 
            Enter your specialties and program counts below to calculate your fees.
          </p>
          {specialties.map(({ id, specialty, count }) => (
            <SpecialtyInput
              key={id}
              specialty={specialty}
              count={count}
              onChange={(field, value) => handleInputChange(id, field, value)}
              onRemove={() => removeSpecialty(id)}
            />
          ))}
          <Button onClick={addSpecialty} className="w-full mt-4 bg-[#34495E] hover:bg-[#2C3E50] text-white">
            <PlusCircle className="mr-2 h-4 w-4" /> Add Specialty
          </Button>
          <div className="mt-6 p-4 bg-[#F2F6FA] rounded-lg">
            <p className="text-lg font-semibold text-[#34495E]">
              Total Estimated Fee: ${totalFee}
            </p>
            <p className="text-xs text-gray-600 mt-2">
              Fees are automatically calculated in the MyERAS® portal. You can pay online using Visa, MasterCard, American Express, or Discover.
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ResidencyFeeCalculator;
